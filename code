import json
import random
from datetime import datetime, timedelta

# --- Your original exceptions_template and exception_descriptions go here unchanged ---

exceptions_template = {
    # ... (your original exceptions_template here, unchanged) ...
}

exception_descriptions = {
    # ... (your original exception_descriptions here, unchanged) ...
}

# --- Additional exceptions to merge into the existing template ---
additional_exceptions = {
    'User Registration & Authentication': {
        'UserValidator': {
            'registerUser': [
                'CaptchaVerificationFailedError'
            ],
            'validateLogin': [
                'TooManyLoginAttemptsError'
            ]
        },
        'SearchService': {
            'autoSuggest': [
                'AutoSuggestFailureError'
            ]
        },
        'CartService': {
            'saveCart': [
                'CartPersistenceError'
            ]
        },
        'CheckoutService': {
            'placeOrder': [
                'OrderDuplicateSubmissionError'
            ]
        },
        'NotificationService': {
            'sendEmail': [
                'EmailSpamDetectedError'
            ]
        },
        'PaymentGateway': {
            'verifyTransaction': [
                'PaymentReversalError'
            ]
        }
    }
}

# Function to merge additional exceptions into your original template
def merge_exceptions(base, additions):
    for app, services in additions.items():
        if app not in base:
            base[app] = {}
        for service, methods in services.items():
            if service not in base[app]:
                base[app][service] = {}
            for method, exc_list in methods.items():
                if method in base[app][service]:
                    base[app][service][method].extend(exc_list)
                else:
                    base[app][service][method] = exc_list

# Merge the additional exceptions
merge_exceptions(exceptions_template, additional_exceptions)

# --- User list for the user column ---
users = [f"user{str(i).zfill(3)}" for i in range(1, 201)]  # user001, user002, ...

# --- Your original generate_logs function with only user field added ---
def generate_logs(num_records=5000):
    logs = []
    for _ in range(num_records):
        app = random.choice(list(exceptions_template.keys()))
        service = random.choice(list(exceptions_template[app].keys()))
        method_or_exceptions = exceptions_template[app][service]

        if isinstance(method_or_exceptions, dict):
            method = random.choice(list(method_or_exceptions.keys()))
            exception_list = method_or_exceptions[method]
        else:
            method = random.choice(method_or_exceptions)
            exception_list = [method]

        exc = random.choice(exception_list)
        description = exception_descriptions.get(exc, 'No description available.')
        fake_time = datetime.now() - timedelta(minutes=random.randint(0, 100000))
        logs.append({
            'user': random.choice(users),  # <-- Added user column here
            'application_component': app,
            'service': service,
            'method_name': method,
            'exception': exc,
            'description': description,
            'date_time': fake_time.strftime('%Y-%m-%d %H:%M:%S')
        })
    return logs

# --- Write to JSON ---
with open('enhanced_ecommerce_exception_logs.json', 'w') as f:
    json.dump(generate_logs(), f, indent=4)

print("âœ… 5000 enhanced e-commerce exception records saved to 'enhanced_ecommerce_exception_logs.json'.")
