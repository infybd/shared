import random
from datetime import datetime, timedelta
import json

# Exception descriptions dictionary
exception_descriptions = {
    "NullPointerException": "Null reference encountered during execution.",
    "IndexOutOfBoundsException": "Index accessed is out of bounds.",
    "IOException": "Error occurred during input/output operations.",
    "FileNotFoundException": "Specified file was not found.",
    "SQLException": "Error interacting with the database.",
    "TimeoutException": "Operation timed out.",
    "AuthenticationException": "User authentication failed.",
    "AuthorizationException": "User not authorized to perform this action.",
    "ConnectionException": "Failed to connect to the remote server.",
    "DataFormatException": "Data format is incorrect.",
    "ParseException": "Failed to parse the input data.",
    "DuplicateKeyException": "Duplicate key encountered during insertion.",
    "ServiceUnavailableException": "Requested service is currently unavailable.",
    "IllegalArgumentException": "Invalid argument provided to method.",
    "ResourceNotFoundException": "Requested resource was not found.",
    "StackOverflowError": "Stack limit exceeded due to deep recursion.",
    "OutOfMemoryError": "Application ran out of memory.",
    "ArithmeticException": "Illegal arithmetic operation, like divide by zero.",
    "InterruptedException": "Thread was interrupted during execution.",
    "UnsupportedOperationException": "Requested operation is not supported.",
    "IllegalStateException": "Object is in an illegal or inappropriate state.",
    "ValidationException": "Input validation failed.",
    "NetworkException": "A general network error occurred.",
    "DeadlockException": "A deadlock occurred during resource acquisition.",
    "ConcurrencyException": "Concurrent modification detected.",
    "ConfigException": "Configuration error encountered.",
    "UnknownException": "An unknown error has occurred."
}

# Template of how exceptions are mapped in services and methods
exceptions_template = {
    "UserService": {
        "AuthService": {
            "loginUser": ["AuthenticationException", "AuthorizationException"],
            "registerUser": ["ValidationException", "DuplicateKeyException"]
        },
        "ProfileService": {
            "getUserProfile": ["NullPointerException", "ResourceNotFoundException"],
            "updateUserProfile": ["IllegalArgumentException", "DataFormatException"]
        }
    },
    "PaymentService": {
        "TransactionService": {
            "initiateTransaction": ["IOException", "TimeoutException", "SQLException"],
            "refundTransaction": ["IllegalStateException", "ParseException"]
        },
        "WalletService": {
            "addFunds": ["ArithmeticException", "OutOfMemoryError"],
            "deductFunds": ["NullPointerException", "IllegalArgumentException"]
        }
    },
    "OrderService": {
        "OrderProcessing": {
            "createOrder": ["SQLException", "TimeoutException"],
            "cancelOrder": ["InterruptedException", "ResourceNotFoundException"]
        },
        "InventoryService": {
            "updateInventory": ["IOException", "ConcurrencyException"],
            "checkInventory": ["NullPointerException", "IndexOutOfBoundsException"]
        }
    }
}

# Add unmapped exceptions to a generic service
used_exceptions = set()
for app in exceptions_template.values():
    for service in app.values():
        for methods in service.values():
            used_exceptions.update(methods)

unused_exceptions = set(exception_descriptions.keys()) - used_exceptions
if unused_exceptions:
    exceptions_template.setdefault("Miscellaneous", {})
    exceptions_template["Miscellaneous"].setdefault("UnmappedService", {})
    exceptions_template["Miscellaneous"]["UnmappedService"]["handleUnknown"] = list(unused_exceptions)

# Create a pool of users
user_pool = [f"user{str(i).zfill(4)}" for i in range(1, 501)]

# Log generator
def generate_logs(num_records=5000):
    logs = []
    now = datetime.now()
    for _ in range(num_records):
        app = random.choice(list(exceptions_template.keys()))
        service = random.choice(list(exceptions_template[app].keys()))
        method_or_exceptions = exceptions_template[app][service]

        if isinstance(method_or_exceptions, dict):
            method = random.choice(list(method_or_exceptions.keys()))
            exception = random.choice(method_or_exceptions[method])
        else:
            method = 'genericHandler'
            exception = random.choice(method_or_exceptions)

        description = exception_descriptions.get(exception, "No description available.")
        timestamp = now - timedelta(seconds=random.randint(0, 604800))  # past 7 days
        user = random.choice(user_pool)

        log_entry = {
            "timestamp": timestamp.strftime("%Y-%m-%d %H:%M:%S"),
            "application": app,
            "service": service,
            "method": method,
            "exception": exception,
            "description": description,
            "user": user
        }
        logs.append(log_entry)
    return logs

# Generate and optionally save logs
if __name__ == "__main__":
    logs = generate_logs(5000)
    
    # Save to a file (optional)
    with open("synthetic_logs.json", "w") as f:
        json.dump(logs, f, indent=2)
    
    # Print 3 sample logs
    for log in logs[:3]:
        print(json.dumps(log, indent=2))
