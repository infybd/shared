# Generate fake logs
def generate_logs(template, descriptions, num_entries=100):
    logs = []
    for _ in range(num_entries):
        module = random.choice(list(template.keys()))
        service = random.choice(list(template[module].keys()))
        method = random.choice(list(template[module][service].keys()))
        exception = random.choice(template[module][service][method])
        description = descriptions.get(exception, "No description available.")
        log = {
            "timestamp": (datetime.now() - timedelta(minutes=random.randint(0, 1440))).isoformat(),
            "module": module,
            "service": service,
            "method": method,
            "exception": exception,
            "description": description
        }
        logs.append(log)
    return logs

# Generate logs
logs = generate_logs(exceptions_template, exception_descriptions, 200)

# Save as JSON
with open(json_path, "w", encoding="utf-8") as json_file:
    json.dump(logs, json_file, indent=4)

# Save as CSV
with open(csv_path, "w", newline='', encoding="utf-8") as csv_file:
    writer = csv.DictWriter(csv_file, fieldnames=logs[0].keys())
    writer.writeheader()
    writer.writerows(logs)

print("Files written successfully.")
