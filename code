import json
import random
import csv
from datetime import datetime, timedelta

# --- Exception Template ---
exceptions_template = {
    'User Registration & Authentication': {
        'UserValidator': {
            'validateCredentials': [
                'UsernameExistsError', 'EmailExistsError', 'InvalidEmailFormatError', 
                'PasswordComplexityFailureError', 'AccountNotVerifiedError'
            ],
            'validateLogin': [
                'InvalidLoginCredentialsError', 'AccountLockedError', 'SessionExpirationError'
            ],
            'validateProfile': [
                'ProfileUpdateError', 'AvatarUploadFailureError', 'AddressVerificationError', 
                'AccountDeletionError'
            ]
        },
        'AuthenticationService': {
            'processLogin': [
                'UserNotFoundError', 'InvalidCredentialsError', 'AccountLockedError',
                'SessionExpirationError'
            ],
            'processLogout': [
                'SessionNotFoundError', 'SessionExpiredError'
            ],
            'processSocialLogin': [
                'SocialLoginFailureError', 'AccountLinkingError', 'OAuthFailureError'
            ],
            'handle2FA': [
                'TwoFactorAuthFailureError', 'InvalidVerificationCodeError', 'TwoFactorTimeoutError'
            ]
        }
    },
    'Product Catalog & Inventory': {
        'ProductService': {
            'getProduct': [
                'ProductNotFoundError', 'ProductCategoryNotFoundError', 'InvalidProductDataError'
            ],
            'updateInventory': [
                'InsufficientStockError', 'InventoryUpdateFailureError', 'PriceDiscrepancyError'
            ],
            'reserveStock': [
                'StockReservationFailureError', 'ReservationTimeoutError', 'ReservationExpirationError'
            ]
        },
        'SearchService': {
            'searchProducts': [
                'SearchEngineError', 'InvalidFilterParametersError', 'SearchTimeoutError',
                'ExcessiveResultsError'
            ],
            'filterProducts': [
                'InvalidFilterParametersError', 'NoResultsFoundError'
            ],
            'analyzeSearchTrends': [
                'SearchAnalyticsError', 'DataProcessingOverloadError'
            ]
        }
    },
    'Shopping Cart & Wishlist': {
        'CartService': {
            'addToCart': [
                'CartItemNotFoundError', 'MaximumQuantityExceededError', 'CartSessionExpiredError',
                'ItemNoLongerAvailableError'
            ],
            'updateCart': [
                'CartItemNotFoundError', 'InsufficientStockError', 'CartUpdateFailureError'
            ],
            'checkoutCart': [
                'EmptyCartError', 'ProductUnavailableError', 'CartValidationError'
            ],
            'mergeCart': [
                'CartMergeConflictError', 'CartDataCorruptionError'
            ]
        },
        'WishlistService': {
            'addToWishlist': [
                'WishlistSyncError', 'ItemUnavailableForWishlistError', 'WishlistLimitExceededError'
            ],
            'moveToCart': [
                'WishlistItemNotFoundError', 'CartAdditionFailureError'
            ],
            'shareWishlist': [
                'WishlistSharingError', 'InvalidSharingPermissionsError'
            ]
        }
    },
    'Payment Processing': {
        'PaymentGateway': {
            'processPayment': [
                'PaymentGatewayError', 'PaymentDeclinedError', 'InvalidCardDetailsError',
                'PaymentTimeoutError', 'InsufficientFundsError', 'CurrencyConversionError',
                'PaymentGatewayTimeoutError'
            ],
            'validatePayment': [
                'CardValidationError', 'PaymentValidationError', 'FraudDetectionError'
            ],
            'processRefund': [
                'RefundProcessingError', 'PartialRefundError', 'RefundLimitExceededError'
            ],
            'handleCryptoCurrency': [
                'CryptoPaymentVerificationError', 'BlockchainConnectionError', 'WalletAddressInvalidError'
            ]
        }
    },
    'Order Processing': {
        'OrderService': {
            'createOrder': [
                'OrderCreationFailureError', 'ShippingCalculationError', 'AddressValidationError'
            ],
            'updateOrder': [
                'OrderStatusUpdateFailureError', 'OrderNotFoundError', 'InvalidOrderStatusError'
            ],
            'processRefund': [
                'RefundProcessingError', 'OrderRefundFailureError'
            ],
            'splitOrder': [
                'OrderSplitFailureError', 'MultiWarehouseCoordinationError'
            ]
        },
        'ShippingService': {
            'calculateShipping': [
                'ShippingCalculationError', 'ShippingProviderError', 'ShippingLocationUnavailableError'
            ],
            'trackShipment': [
                'ShipmentTrackingError', 'ShipmentNotFoundError', 'ShippingProviderError'
            ],
            'updateDeliveryOptions': [
                'DeliveryOptionUpdateError', 'LastMileDeliveryFailureError'
            ]
        },
        'TaxService': {
            'calculateTax': [
                'TaxCalculationError', 'TaxRateNotFoundError', 'TaxJurisdictionError'
            ],
            'validateTaxExemption': [
                'TaxExemptionValidationError', 'InvalidTaxDocumentError'
            ]
        }
    },
    'Promotions & Discounts': {
        'PromotionService': {
            'applyPromotion': [
                'InvalidCouponCodeError', 'ExpiredPromotionError', 'DiscountCalculationError',
                'CouponUsageLimitExceededError', 'IncompatiblePromotionsError'
            ],
            'validatePromotion': [
                'PromotionValidationError', 'PromotionNotApplicableError', 'MinimumPurchaseRequirementError'
            ],
            'generatePromotionCode': [
                'PromotionCodeGenerationError', 'DuplicatePromotionCodeError'
            ]
        }
    },
    'Reviews & Ratings': {
        'ReviewService': {
            'submitReview': [
                'ReviewSubmissionError', 'DuplicateReviewError', 'ReviewModerationError'
            ],
            'moderateReview': [
                'ReviewContentViolationError', 'ReviewProcessingError' 
            ],
            'calculateProductRating': [
                'RatingCalculationError', 'ReviewDataInconsistencyError'
            ]
        }
    },
    'Notifications & Communications': {
        'NotificationService': {
            'sendEmail': [
                'EmailSendingFailureError', 'InvalidEmailAddressError', 'EmailTemplateError'
            ],
            'sendSMS': [
                'SMSDeliveryFailureError', 'InvalidPhoneNumberError', 'SMSQuotaExceededError'
            ],
            'sendPushNotification': [
                'PushNotificationErrorError', 'DeviceRegistrationError', 'NotificationDeliveryError'
            ],
            'scheduleNotification': [
                'NotificationSchedulingError', 'NotificationQueueOverflowError'
            ]
        },
        'CommunicationService': {
            'prepareTemplate': [
                'CommunicationTemplateError', 'TemplateRenderingError', 'TemplateVariableError'
            ],
            'processUnsubscribe': [
                'UnsubscribeProcessingError', 'CommunicationPreferenceUpdateError'
            ]
        }
    },
    'System & Security': {
        'DatabaseService': {
            'executeQuery': [
                'DatabaseConnectionError', 'DatabaseQueryTimeoutError', 'DatabaseTransactionError'
            ],
            'performBackup': [
                'DatabaseBackupFailureError', 'BackupStorageFullError'
            ]
        },
        'APIService': {
            'processRequest': [
                'ThirdPartyAPIFailureError', 'RateLimitExceededError', 'APIAuthenticationFailureError'
            ],
            'validateAPIKey': [
                'InvalidAPIKeyError', 'APIKeyExpiredError', 'APIPermissionDeniedError'
            ]
        },
        'SecurityService': {
            'validateRequest': [
                'CSRFTokenValidationError', 'IPBlockingError', 'FraudDetectionAlertError'
            ],
            'monitorSystem': [
                'ResourceLimitExceededError', 'CacheInvalidationError', 'BackgroundJobFailureError'
            ],
            'detectDDoS': [
                'DDoSAttackDetectedError', 'TrafficAnomalyError'
            ]
        },
        'ReportingService': {
            'generateReport': [
                'ReportGenerationError', 'DataExportTimeoutError', 'InvalidDateRangeError',
                'AnalyticsIntegrationError'
            ],
            'scheduleDailyReport': [
                'ReportSchedulingError', 'HistoricalDataAccessError'
            ]
        }
    },
    'Customer Service': {
        'TicketService': {
            'createTicket': [
                'TicketCreationError', 'TicketCategoryNotFoundError', 'AttachmentUploadFailureError'
            ],
            'assignTicket': [
                'AgentNotAvailableError', 'TicketAssignmentFailureError', 'WorkloadBalancingError'
            ],
            'escalateTicket': [
                'EscalationFailureError', 'NoAvailableManagerError'
            ]
        },
        'LiveChatService': {
            'initializeChat': [
                'ChatInitializationFailureError', 'NoAgentsAvailableError', 'ChatQueueOverflowError'
            ],
            'transferChat': [
                'ChatTransferFailureError', 'ChatDisconnectionError'
            ]
        }
    }
}

# --- Exception Descriptions ---
exception_descriptions = {
    # User Registration & Authentication
    'UsernameExistsError': 'The provided username is already taken by another user.',
    'EmailExistsError': 'An account with this email address already exists.',
    'InvalidEmailFormatError': 'The email address format is invalid.',
    'PasswordComplexityFailureError': 'Password does not meet complexity requirements.',
    'AccountNotVerifiedError': 'The account has not been verified yet.',
    'InvalidLoginCredentialsError': 'The provided login credentials are incorrect.',
    'AccountLockedError': 'The account has been locked due to multiple failed login attempts.',
    'SessionExpirationError': 'The user session has expired.',
    'ProfileUpdateError': 'Failed to update user profile information.',
    'AvatarUploadFailureError': 'Failed to upload user profile image.',
    'AddressVerificationError': 'Could not verify the provided address.',
    'AccountDeletionError': 'Failed to delete user account.',
    'UserNotFoundError': 'The requested user account could not be found.',
    'InvalidCredentialsError': 'The provided credentials are invalid.',
    'SessionNotFoundError': 'No active session found for this user.',
    'SessionExpiredError': 'The session has expired.',
    'SocialLoginFailureError': 'Failed to authenticate with social media provider.',
    'AccountLinkingError': 'Failed to link social account with existing user.',
    'OAuthFailureError': 'OAuth authentication process failed.',
    'TwoFactorAuthFailureError': 'Two-factor authentication verification failed.',
    'InvalidVerificationCodeError': 'The provided verification code is invalid or expired.',
    'TwoFactorTimeoutError': 'The two-factor authentication process timed out.',
    
    # Product Catalog & Inventory
    'ProductNotFoundError': 'The requested product could not be found.',
    'ProductCategoryNotFoundError': 'The specified product category does not exist.',
    'InvalidProductDataError': 'The product data is invalid or incomplete.',
    'InsufficientStockError': 'There is not enough stock available for this product.',
    'InventoryUpdateFailureError': 'Failed to update the inventory records.',
    'PriceDiscrepancyError': 'There is a discrepancy between displayed and actual price.',
    'SearchEngineError': 'The search engine encountered an error.',
    'InvalidFilterParametersError': 'The provided filter parameters are invalid.',
    'SearchTimeoutError': 'The search operation timed out.',
    'ExcessiveResultsError': 'The search returned too many results to process.',
    'NoResultsFoundError': 'No results found for the specified search criteria.',
    'StockReservationFailureError': 'Failed to reserve stock for the current order.',
    'ReservationTimeoutError': 'The stock reservation timed out.',
    'ReservationExpirationError': 'The stock reservation has expired.',
    'SearchAnalyticsError': 'Failed to analyze search trends and patterns.',
    'DataProcessingOverloadError': 'Search analytics data processing overload encountered.',
    
    # Shopping Cart & Wishlist
    'CartItemNotFoundError': 'The specified item was not found in the cart.',
    'MaximumQuantityExceededError': 'The maximum allowed quantity for this item has been exceeded.',
    'CartSessionExpiredError': 'The shopping cart session has expired.',
    'ItemNoLongerAvailableError': 'The item is no longer available for purchase.',
    'CartUpdateFailureError': 'Failed to update the shopping cart.',
    'EmptyCartError': 'The shopping cart is empty.',
    'ProductUnavailableError': 'One or more products in the cart are no longer available.',
    'CartValidationError': 'Failed to validate the shopping cart contents.',
    'WishlistSyncError': 'Failed to synchronize wishlist across devices.',
    'ItemUnavailableForWishlistError': 'The item cannot be added to the wishlist.',
    'WishlistLimitExceededError': 'The wishlist item limit has been reached.',
    'WishlistItemNotFoundError': 'The specified item was not found in the wishlist.',
    'CartAdditionFailureError': 'Failed to add wishlist item to the cart.',
    'CartMergeConflictError': 'Conflict occurred while merging guest cart with user cart.',
    'CartDataCorruptionError': 'Shopping cart data corruption detected.',
    'WishlistSharingError': 'Failed to share wishlist with specified recipients.',
    'InvalidSharingPermissionsError': 'Invalid permissions for wishlist sharing.',
    
    # Payment Processing
    'PaymentGatewayError': 'The payment gateway encountered an error.',
    'PaymentDeclinedError': 'The payment was declined by the payment processor.',
    'InvalidCardDetailsError': 'The provided card details are invalid.',
    'PaymentTimeoutError': 'The payment process timed out.',
    'InsufficientFundsError': 'There are insufficient funds to complete the transaction.',
    'CurrencyConversionError': 'Failed to convert currency for international transaction.',
    'PaymentGatewayTimeoutError': 'The payment gateway timed out during processing.',
    'CardValidationError': 'Failed to validate the provided card details.',
    'PaymentValidationError': 'Failed to validate the payment information.',
    'FraudDetectionError': 'The payment was flagged by fraud detection system.',
    'RefundProcessingError': 'Failed to process the refund request.',
    'PartialRefundError': 'Only a partial refund could be processed.',
    'RefundLimitExceededError': 'The refund limit for this order has been exceeded.',
    'CryptoPaymentVerificationError': 'Failed to verify cryptocurrency payment transaction.',
    'BlockchainConnectionError': 'Failed to connect to blockchain network for payment verification.',
    'WalletAddressInvalidError': 'The provided cryptocurrency wallet address is invalid.',
    
    # Order Processing
    'OrderCreationFailureError': 'Failed to create a new order.',
    'ShippingCalculationError': 'Failed to calculate shipping costs.',
    'AddressValidationError': 'The provided shipping address is invalid.',
    'OrderStatusUpdateFailureError': 'Failed to update the order status.',
    'OrderNotFoundError': 'The specified order could not be found.',
    'InvalidOrderStatusError': 'The specified order status is invalid.',
    'OrderRefundFailureError': 'Failed to process refund for the order.',
    'ShippingProviderError': 'The shipping provider encountered an error.',
    'ShippingLocationUnavailableError': 'Shipping is not available to the specified location.',
    'ShipmentTrackingError': 'Failed to retrieve shipment tracking information.',
    'ShipmentNotFoundError': 'The specified shipment could not be found.',
    'TaxCalculationError': 'Failed to calculate taxes for the order.',
    'TaxRateNotFoundError': 'Tax rate not found for the specified location.',
    'TaxJurisdictionError': 'Failed to determine tax jurisdiction for the address.',
    'OrderSplitFailureError': 'Failed to split order into multiple shipments.',
    'MultiWarehouseCoordinationError': 'Failed to coordinate fulfillment across multiple warehouses.',
    'DeliveryOptionUpdateError': 'Failed to update delivery options for the order.',
    'LastMileDeliveryFailureError': 'Last-mile delivery service encountered an error.',
    'TaxExemptionValidationError': 'Failed to validate tax exemption certificate.',
    'InvalidTaxDocumentError': 'The provided tax document is invalid or expired.',
    
    # Promotions & Discounts
    'InvalidCouponCodeError': 'The provided coupon code is invalid.',
    'ExpiredPromotionError': 'The promotion has expired.',
    'DiscountCalculationError': 'Failed to calculate the discount amount.',
    'CouponUsageLimitExceededError': 'The coupon usage limit has been exceeded.',
    'IncompatiblePromotionsError': 'The selected promotions cannot be combined.',
    'PromotionValidationError': 'Failed to validate the promotion.',
    'PromotionNotApplicableError': 'The promotion is not applicable to the current order.',
    'MinimumPurchaseRequirementError': 'The order does not meet minimum purchase requirement.',
    'PromotionCodeGenerationError': 'Failed to generate unique promotion code.',
    'DuplicatePromotionCodeError': 'The generated promotion code already exists.',
    
    # Reviews & Ratings
    'ReviewSubmissionError': 'Failed to submit the product review.',
    'DuplicateReviewError': 'A review has already been submitted for this product.',
    'ReviewModerationError': 'The review was flagged during moderation.',
    'ReviewContentViolationError': 'The review content violates community guidelines.',
    'ReviewProcessingError': 'Failed to process the review submission.',
    'RatingCalculationError': 'Failed to calculate product rating from reviews.',
    'ReviewDataInconsistencyError': 'Inconsistency detected in review data for the product.',
    
    # Notifications & Communications
    'EmailSendingFailureError': 'Failed to send email notification.',
    'InvalidEmailAddressError': 'The email address is invalid.',
    'EmailTemplateError': 'Failed to render email template.',
    'SMSDeliveryFailureError': 'Failed to deliver SMS notification.',
    'InvalidPhoneNumberError': 'The phone number is invalid.',
    'SMSQuotaExceededError': 'The SMS quota has been exceeded.',
    'PushNotificationErrorError': 'Failed to send push notification.',
    'DeviceRegistrationError': 'The device is not registered for push notifications.',
    'NotificationDeliveryError': 'Failed to deliver notification.',
    'CommunicationTemplateError': 'Failed to process communication template.',
    'TemplateRenderingError': 'Failed to render template.',
    'TemplateVariableError': 'Missing or invalid template variables.',
    'NotificationSchedulingError': 'Failed to schedule future notification.',
    'NotificationQueueOverflowError': 'Notification queue capacity exceeded.',
    'UnsubscribeProcessingError': 'Failed to process unsubscribe request.',
    'CommunicationPreferenceUpdateError': 'Failed to update communication preferences.',
    
    # System & Security
    'DatabaseConnectionError': 'Failed to connect to the database.',
    'DatabaseQueryTimeoutError': 'Database query timed out.',
    'DatabaseTransactionError': 'Database transaction failed.',
    'ThirdPartyAPIFailureError': 'Third-party API request failed.',
    'RateLimitExceededError': 'API rate limit has been exceeded.',
    'APIAuthenticationFailureError': 'Failed to authenticate with API.',
    'CSRFTokenValidationError': 'Failed to validate CSRF token.',
    'IPBlockingError': 'Failed to block suspicious IP address.',
    'FraudDetectionAlertError': 'Fraud detection system flagged suspicious activity.',
    'ResourceLimitExceededError': 'System resource limit has been exceeded.',
    'CacheInvalidationError': 'Failed to invalidate cache.',
    'BackgroundJobFailureError': 'Background job failed to complete.',
    'ReportGenerationError': 'Failed to generate report.',
    'DataExportTimeoutError': 'Data export operation timed out.',
    'InvalidDateRangeError': 'The specified date range is invalid.',
    'AnalyticsIntegrationError': 'Failed to integrate with analytics service.',
    'DatabaseBackupFailureError': 'Database backup process failed.',
    'BackupStorageFullError': 'Backup storage space is full.',
    'InvalidAPIKeyError': 'The provided API key is invalid.',
    'APIKeyExpiredError': 'The API key has expired.',
    'APIPermissionDeniedError': 'The API key does not have required permissions.',
    'DDoSAttackDetectedError': 'Potential DDoS attack detected.',
    'TrafficAnomalyError': 'Unusual traffic pattern detected.',
    'ReportSchedulingError': 'Failed to schedule automated report generation.',
    'HistoricalDataAccessError': 'Failed to access historical data for reporting.',
    
    # Customer Service
    'TicketCreationError': 'Failed to create customer support ticket.',
    'TicketCategoryNotFoundError': 'The specified ticket category does not exist.',
    'AttachmentUploadFailureError': 'Failed to upload attachment to support ticket.',
    'AgentNotAvailableError': 'No customer service agents are available.',
    'TicketAssignmentFailureError': 'Failed to assign ticket to customer service agent.',
    'WorkloadBalancingError': 'Failed to balance workload among customer service agents.',
    'EscalationFailureError': 'Failed to escalate customer support ticket.',
    'NoAvailableManagerError': 'No managers are available for ticket escalation.',
    'ChatInitializationFailureError': 'Failed to initialize live chat session.',
    'NoAgentsAvailableError': 'No chat agents are available at the moment.',
    'ChatQueueOverflowError': 'Chat queue capacity exceeded.',
    'ChatTransferFailureError': 'Failed to transfer chat to another agent.',
    'ChatDisconnectionError': 'Chat session was unexpectedly disconnected.'
}

# --- Log Generator ---
def generate_logs(num_records=5000):
    logs = []
    # Generate some realistic user IDs
    user_ids = [f'user_{str(random.randint(1000, 9999))}' for _ in range(300)]
    
    for _ in range(num_records):
        app = random.choice(list(exceptions_template.keys()))
        service = random.choice(list(exceptions_template[app].keys()))
        method_or_exceptions = exceptions_template[app][service]

        # Handle both dictionary (with methods) and direct exception lists
        if isinstance(method_or_exceptions, dict):
            method = random.choice(list(method_or_exceptions.keys()))  # Pick a random method
            exception_list = method_or_exceptions[method]
        else:
            method = random.choice(method_or_exceptions)  # Directly select an exception as method
            exception_list = [method]  # Only one exception since it's not method-specific

        exc = random.choice(exception_list)
        description = exception_descriptions.get(exc, 'No description available.')
        fake_time = datetime.now() - timedelta(minutes=random.randint(0, 100000))
        
        # Add a user ID to the log entry - sometimes null for system-level errors
        user_id = None
        if random.random() > 0.2 or 'User' in app or 'Cart' in service or 'Order' in service:
            user_id = random.choice(user_ids)
        
        logs.append({
            'application_component': app,
            'service': service,
            'method_name': method,
            'exception': exc,
            'description': description,
            'date_time': fake_time.strftime('%Y-%m-%d %H:%M:%S'),
            'user_id': user_id
        })
    return logs

# Generate the logs
exception_logs = generate_logs()

# --- Write to JSON ---
with open('ecommerce_exception_logs.json', 'w') as f:
    json.dump(exception_logs, f, indent=4)

# --- Write to CSV ---
with open('ecommerce_exception_logs.csv', 'w', newline='') as f:
    fieldnames = ['application_component', 'service', 'method_name', 'exception', 'description', 'date_time', 'user_id']
    writer = csv.DictWriter(f, fieldnames=fieldnames)
    writer.writeheader()
    for log in exception_logs:
        writer.writerow(log)

print("✅ 5000 fake e-commerce exception records saved to 'ecommerce_exception_logs.json' and 'ecommerce_exception_logs.csv'.")
